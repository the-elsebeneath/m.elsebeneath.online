---
// src/pages/story/[slug].astro
import Base from "../../components/BaseLayout.astro";
import { getCollection } from "astro:content";

export async function getStaticPaths() {
  const stories = await getCollection("stories");
  return stories.map((entry) => ({
    params: { slug: entry.data.name }, // or entry.slug if you prefer filename-based
    props: { story: entry },
  }));
}

const { slug } = Astro.params;
const all = await getCollection("stories");
const story = all.find((s) => s.data.name === slug);
if (!story) throw new Error("Story not found");

const {
  title,
  description,
  cover = "",
  audio = "",
  tags = [],
  readingTime = "",
} = story.data;
const { Content } = await story.render();

// simple related picks: share a tag, else newest
const related = all
  .filter((e) => e.data.name !== slug)
  .map((e) => ({
    e,
    score: e.data.tags?.some((t) => (tags || []).includes(t)) ? 1 : 0,
  }))
  .sort((a, b) => (a.e.data.order || 0) - (b.e.data.order || 0))
  .slice(0, 0)
  .map((x) => x.e);
---

<Base
  title={`${title} â€” The Elsebeneath`}
  description={description}
  image={cover}
>
  <div class="story-container">
    <article class="readable" itemscope itemtype="https://schema.org/Article">
      <header class="head">
        <nav class="breadcrumb">
          <a href="/stories" class="crumb" aria-label="Back to all stories">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M19 12H5M5 12L12 19M5 12L12 5"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            All stories
          </a>
        </nav>

        <div class="story-header">
          <h1 class="display" itemprop="headline">{title}</h1>

          <div class="meta">
            {readingTime && <span class="reading-time">{readingTime}</span>}
            {
              tags?.length ? (
                <div class="tag-list">
                  {tags.map((tag: string) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              ) : null
            }
          </div>

          {
            cover && (
              <div class="cover-wrapper">
                <img
                  src={cover}
                  alt={`${title} cover`}
                  width="343"
                  height="515"
                  class="cover"
                  loading="eager"
                  fetchpriority="high"
                  decoding="async"
                />
              </div>
            )
          }

          {
            audio && (
              <div class="audio-section">
                <button
                  id="load-audio"
                  class="btn primary audio-btn"
                  data-audio-src={audio}
                  aria-label="Load and play audiobook"
                >
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <polygon points="5,3 19,12 5,21" fill="currentColor" />
                  </svg>
                  Play audiobook
                  <span class="hint">(loads on click)</span>
                </button>
              </div>
            )
          }
        </div>
      </header>

      <div class="content-wrapper">
        <div class="content" itemprop="articleBody">
          <Content />
        </div>
      </div>

      <footer class="story-footer">
        <div class="separator"></div>

        <nav class="trail" aria-label="Next steps">
          <div class="related-stories">
            {
              related.map((r) => (
                <a class="btn pill related-btn" href={`/story/${r.data.name}`}>
                  <span class="btn-label">Next story</span>
                  <span class="btn-title">{r.data.title}</span>
                </a>
              ))
            }
          </div>
          <a class="btn pill back-btn" href="/stories">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M3 12L21 12M3 12L9 18M3 12L9 6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            Back to all stories
          </a>
        </nav>
      </footer>
    </article>
  </div>

  <!-- Reader prefs (enhanced) -->
  <div class="prefs" role="region" aria-label="Reading preferences">
    <div class="prefs-group">
      <label class="pref-item">
        <span class="pref-label">Font size</span>
        <input
          id="fs"
          type="range"
          min="90"
          max="130"
          value="100"
          class="range-input"
        />
      </label>
      <label class="pref-item checkbox-item">
        <input id="ls" type="checkbox" />
        <span class="pref-label">Loose spacing</span>
      </label>
      <label class="pref-item checkbox-item">
        <input id="sepia" type="checkbox" />
        <span class="pref-label">Sepia</span>
      </label>
    </div>
  </div>

  <!-- Enhanced progress bar -->
  <div id="progress" class="progress" aria-hidden="true">
    <div class="progress-bar"></div>
  </div>

  <style>
    :root {
      --fs: 100%;
      --lh: 1.7;
      --story-accent: #7c3aed;
      --story-accent-light: #a78bfa;
    }

    .story-container {
      min-height: 100vh;
      background: radial-gradient(
          ellipse 120% 70% at 50% -20%,
          rgba(124, 58, 237, 0.1),
          rgba(124, 58, 237, 0.05) 50%,
          transparent 70%
        ),
        radial-gradient(
          circle at 20% 50%,
          rgba(139, 92, 246, 0.08) 0%,
          transparent 50%
        ),
        radial-gradient(
          circle at 80% 20%,
          rgba(59, 130, 246, 0.08) 0%,
          transparent 50%
        ),
        linear-gradient(
          135deg,
          #fefefe 0%,
          #f8fafc 25%,
          #f1f5f9 50%,
          #e2e8f0 100%
        );
      position: relative;
    }

    .story-container::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(
          circle at 10% 20%,
          rgba(124, 58, 237, 0.03) 0%,
          transparent 50%
        ),
        radial-gradient(
          circle at 90% 80%,
          rgba(59, 130, 246, 0.03) 0%,
          transparent 50%
        );
      pointer-events: none;
    }

    .readable {
      max-width: 52rem;
      margin: 0 auto;
      padding: 2rem 1rem;
      position: relative;
      z-index: 1;
    }

    .breadcrumb {
      margin-bottom: 2rem;
    }

    .crumb {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      color: #6366f1;
      text-decoration: none;
      font-weight: 600;
      padding: 0.5rem 0;
      transition: all 0.3s ease;
    }

    .crumb:hover {
      color: var(--story-accent);
      transform: translateX(-2px);
    }

    .crumb svg {
      width: 16px;
      height: 16px;
      transition: transform 0.3s ease;
    }

    .crumb:hover svg {
      transform: translateX(-2px);
    }

    .story-header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .display {
      font:
        700 2.5rem/1.2 ui-serif,
        Georgia,
        Cambria,
        "Times New Roman",
        serif;
      margin: 0 0 1rem;
      color: #ffffff;
      background: linear-gradient(
        135deg,
        #1e1b4b 0%,
        #312e81 25%,
        #1e3a8a 50%,
        #7c3aed 100%
      );
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    @media (min-width: 40rem) {
      .display {
        font-size: 3rem;
      }
    }

    .meta {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }

    .reading-time {
      color: #64748b;
      font-weight: 600;
      font-size: 1rem;
      padding: 0.75rem 1.25rem;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 999px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }

    .tag-list {
      display: flex;
      gap: 0.75rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .tag {
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--story-accent);
      background: rgba(255, 255, 255, 0.9);
      border: 2px solid rgba(124, 58, 237, 0.2);
      padding: 0.5rem 1rem;
      border-radius: 999px;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .tag:hover {
      background: rgba(124, 58, 237, 0.1);
      border-color: var(--story-accent);
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    .cover-wrapper {
      margin: 2rem 0;
      display: flex;
      justify-content: center;
    }

    .cover {
      max-width: 343px;
      width: 100%;
      height: auto;
      border-radius: 16px;
      box-shadow:
        0 20px 64px rgba(0, 0, 0, 0.15),
        0 8px 32px rgba(0, 0, 0, 0.1);
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
      filter: drop-shadow(0 8px 16px rgba(0, 0, 0, 0.1));
    }

    .cover:hover {
      transform: translateY(-8px) scale(1.02);
      box-shadow:
        0 32px 80px rgba(0, 0, 0, 0.2),
        0 16px 48px rgba(0, 0, 0, 0.15);
    }

    .audio-section {
      margin: 2rem 0;
    }

    .audio-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 1rem 2rem;
      font-weight: 600;
      font-size: 1.1rem;
    }

    .hint {
      font-size: 0.8rem;
      opacity: 0.9;
      font-weight: 400;
    }

    .content-wrapper {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      border-radius: 24px;
      padding: 3rem 2rem;
      margin: 2rem 0;
      border: 1px solid rgba(255, 255, 255, 0.5);
      box-shadow:
        0 20px 64px rgba(0, 0, 0, 0.1),
        0 8px 32px rgba(0, 0, 0, 0.05),
        0 1px 0px rgba(255, 255, 255, 0.8) inset;
      position: relative;
    }

    .content-wrapper::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(
        circle at 30% 20%,
        rgba(124, 58, 237, 0.02) 0%,
        transparent 50%
      );
      border-radius: 24px;
      pointer-events: none;
    }

    .content {
      font:
        400 1.125rem / var(--lh) system-ui,
        -apple-system,
        Segoe UI,
        Roboto,
        "Noto Sans",
        Arial,
        sans-serif;
      font-size: var(--fs);
      color: #374151;
      max-width: 70ch;
      margin: 0 auto;
      line-height: var(--lh);
      position: relative;
      z-index: 1;
    }

    .content p {
      margin: 0 0 1.25rem;
    }

    .content p:last-child {
      margin-bottom: 0;
    }

    .content blockquote {
      margin: 1.5rem 0;
      padding: 1.5rem;
      border-left: 4px solid var(--story-accent);
      background: rgba(124, 58, 237, 0.05);
      border-radius: 0 12px 12px 0;
      color: #1e293b;
      font-style: italic;
      font-size: 1.1em;
    }

    .content hr {
      border: 0;
      height: 2px;
      background: linear-gradient(90deg, transparent, #e2e8f0, transparent);
      margin: 2rem 0;
      border-radius: 1px;
    }

    .content img {
      max-width: 100%;
      height: auto;
      border-radius: 12px;
      margin: 1.5rem 0;
    }

    .story-footer {
      margin-top: 3rem;
    }

    .separator {
      height: 2px;
      background: linear-gradient(90deg, transparent, #c4b5fd, transparent);
      margin: 3rem 0 2rem;
      border-radius: 1px;
    }

    .trail {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      align-items: center;
    }

    .related-stories {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      justify-content: center;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1.25rem;
      font-weight: 600;
      font-size: 0.9rem;
      border-radius: 0.75rem;
      border: 2px solid rgba(255, 255, 255, 0.2);
      color: #374151;
      background: rgba(255, 255, 255, 0.9);
      text-decoration: none;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    }

    .btn:hover {
      background: rgba(255, 255, 255, 1);
      border-color: rgba(124, 58, 237, 0.4);
      color: var(--story-accent);
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }

    .btn:active {
      transform: translateY(0);
    }

    .btn.pill {
      border-radius: 999px;
    }

    .btn.primary {
      background: linear-gradient(135deg, #4f46e5, #7c3aed);
      border-color: #6366f1;
      color: #ffffff;
    }

    .btn.primary:hover {
      background: linear-gradient(135deg, #6366f1, #8b5cf6);
      border-color: #7c3aed;
      color: #ffffff;
      transform: translateY(-2px);
    }

    .related-btn {
      flex-direction: column;
      align-items: flex-start;
      padding: 1rem 1.5rem;
      text-align: left;
      min-width: 200px;
    }

    .btn-label {
      font-size: 0.8rem;
      opacity: 0.7;
      font-weight: 500;
      color: var(--story-accent);
    }

    .btn-title {
      font-size: 1rem;
      font-weight: 600;
      color: #1e293b;
    }

    .back-btn {
      background: rgba(124, 58, 237, 0.1);
      border-color: var(--story-accent);
      color: var(--story-accent);
    }

    .back-btn:hover {
      background: var(--story-accent);
      color: white;
    }

    /* Enhanced Reader prefs */
    .prefs {
      position: fixed;
      bottom: 1rem;
      left: 50%;
      transform: translateX(-50%);
      z-index: 50;
    }

    .prefs-group {
      display: flex;
      gap: 1rem;
      align-items: center;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 16px;
      padding: 1rem 1.5rem;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    }

    .pref-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #374151;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .pref-label {
      white-space: nowrap;
    }

    .range-input {
      width: 100px;
      accent-color: var(--story-accent);
    }

    .checkbox-item input[type="checkbox"] {
      accent-color: var(--story-accent);
      width: 18px;
      height: 18px;
    }

    /* Enhanced Progress bar */
    .progress {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: rgba(124, 58, 237, 0.1);
      z-index: 100;
    }

    .progress-bar {
      width: 0%;
      height: 100%;
      background: linear-gradient(
        90deg,
        var(--story-accent),
        var(--story-accent-light)
      );
      transition: width 0.1s linear;
      box-shadow: 0 0 10px rgba(124, 58, 237, 0.3);
    }

    :focus-visible {
      outline: 3px solid var(--story-accent);
      outline-offset: 3px;
      border-radius: 8px;
    }

    /* Responsive design */
    @media (max-width: 47.9rem) {
      .readable {
        padding: 1rem 0.75rem;
      }

      .display {
        font-size: 2rem;
      }

      .content-wrapper {
        padding: 2rem 1.5rem;
        margin: 1.5rem 0;
      }

      .meta {
        flex-direction: column;
        gap: 0.75rem;
      }

      .tag-list {
        gap: 0.5rem;
      }

      .trail {
        gap: 1rem;
      }

      .related-stories {
        flex-direction: column;
        width: 100%;
      }

      .related-btn {
        min-width: unset;
        width: 100%;
      }

      .prefs-group {
        flex-wrap: wrap;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
      }

      .range-input {
        width: 80px;
      }

      .btn {
        min-width: 200px;
        justify-content: center;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      .progress-bar,
      .btn,
      .cover,
      .tag,
      .crumb {
        transition: none !important;
      }

      .btn:hover,
      .cover:hover,
      .crumb:hover {
        transform: none !important;
      }

      .story-container::before {
        display: none;
      }
    }

    /* Sepia theme (enhanced) */
    html.sepia .story-container {
      background: radial-gradient(
          ellipse 120% 70% at 50% -20%,
          rgba(139, 92, 246, 0.04),
          rgba(139, 92, 246, 0.02) 50%,
          transparent 70%
        ),
        linear-gradient(135deg, #faf5e4 0%, #f7efe2 50%, #f0e6d2 100%);
    }

    html.sepia .content {
      color: #8b5a3c;
    }

    html.sepia .display {
      background: linear-gradient(135deg, #8b5a3c, #a0845c);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    html.sepia .content-wrapper {
      background: rgba(247, 239, 226, 0.9);
    }

    html.sepia .tag {
      color: #8b5a3c;
      background: rgba(247, 239, 226, 0.9);
      border-color: rgba(139, 90, 60, 0.2);
    }

    html.sepia .btn {
      color: #8b5a3c;
      border-color: rgba(139, 90, 60, 0.3);
      background: rgba(247, 239, 226, 0.9);
    }

    html.sepia .btn.primary {
      background: linear-gradient(135deg, #a0845c, #8b5a3c);
      color: #faf5e4;
    }

    html.sepia .prefs-group {
      background: rgba(247, 239, 226, 0.95);
    }

    html.sepia .reading-time {
      background: rgba(247, 239, 226, 0.9);
      color: #8b5a3c;
    }

    /* Low-data optimizations */
    [data-lowdata="true"] .story-container {
      background: linear-gradient(135deg, #fefefe, #f1f5f9);
    }

    [data-lowdata="true"] .story-container::before {
      display: none;
    }

    [data-lowdata="true"] .content-wrapper,
    [data-lowdata="true"] .prefs-group,
    [data-lowdata="true"] .btn,
    [data-lowdata="true"] .tag,
    [data-lowdata="true"] .reading-time {
      backdrop-filter: none;
      background: white;
    }

    [data-lowdata="true"] .cover:hover,
    [data-lowdata="true"] .btn:hover {
      transform: none;
    }
  </style>

  <script is:inline>
    // Enhanced progress bar
    (function () {
      const progressBar = document.querySelector(".progress-bar");
      let ticking = false;

      function updateProgress() {
        const el = document.documentElement;
        const scrolled =
          el.scrollTop / (el.scrollHeight - el.clientHeight || 1);
        const progress = Math.max(0, Math.min(1, scrolled));

        if (progressBar) {
          progressBar.style.width = progress * 100 + "%";
        }
        ticking = false;
      }

      function onScroll() {
        if (!ticking) {
          requestAnimationFrame(updateProgress);
          ticking = true;
        }
      }

      document.addEventListener("scroll", onScroll, { passive: true });
      updateProgress();
    })();

    // Enhanced reader prefs with smooth transitions
    (function () {
      const fs = document.getElementById("fs");
      const ls = document.getElementById("ls");
      const sepia = document.getElementById("sepia");

      function apply() {
        const size = Number(localStorage.getItem("fs") || "100");
        const loose = localStorage.getItem("ls") === "1";
        const isSepia = localStorage.getItem("sepia") === "1";

        document.documentElement.style.setProperty("--fs", size + "%");
        document.documentElement.style.setProperty(
          "--lh",
          loose ? "1.9" : "1.7"
        );
        document.documentElement.classList.toggle("sepia", isSepia);

        if (fs) fs.value = String(size);
        if (ls) ls.checked = loose;
        if (sepia) sepia.checked = isSepia;
      }

      // Debounced font size changes for smooth performance
      let fontSizeTimeout;
      fs?.addEventListener("input", (e) => {
        clearTimeout(fontSizeTimeout);
        fontSizeTimeout = setTimeout(() => {
          localStorage.setItem("fs", e.target.value);
          apply();
        }, 100);
      });

      ls?.addEventListener("change", (e) => {
        localStorage.setItem("ls", e.target.checked ? "1" : "0");
        apply();
      });

      sepia?.addEventListener("change", (e) => {
        localStorage.setItem("sepia", e.target.checked ? "1" : "0");
        apply();
      });

      apply();
    })();

    // Enhanced audio loading with better UX
    (function () {
      const btn = document.getElementById("load-audio");
      if (!btn) return;

      btn.addEventListener("click", () => {
        const src = btn.getAttribute("data-audio-src");
        if (!src) return;

        // Show loading state
        btn.innerHTML = "<span>Loading audio...</span>";
        btn.disabled = true;

        const wrap = btn.parentElement;
        const audio = document.createElement("audio");
        audio.controls = true;
        audio.preload = "metadata";
        audio.src = src;
        audio.style.width = "100%";
        audio.style.maxWidth = "400px";
        audio.style.borderRadius = "12px";

        audio.addEventListener("loadedmetadata", () => {
          wrap?.replaceChild(audio, btn);
          audio.play().catch(() => {
            // Handle autoplay restrictions gracefully
          });
        });

        audio.addEventListener("error", () => {
          btn.innerHTML = "<span>Error loading audio</span>";
          btn.disabled = false;
        });
      });
    })();
  </script>
</Base>
