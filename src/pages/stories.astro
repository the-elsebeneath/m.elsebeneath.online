---
import Base from "../components/BaseLayout.astro";
import { getCollection } from "astro:content";

const all = await getCollection("stories");

// newest first
const stories = all.sort((a, b) => {
  const da = new Date(a.data.order || 0).getTime();
  const db = new Date(b.data.order || 0).getTime();
  return db - da;
});

const pageTitle = "All stories — Elsebeneath";
const pageDesc =
  "Browse every Elsebeneath story. Light, fast, and readable on any connection.";
---

<Base
  title={pageTitle}
  description={pageDesc}
  image="/logo.webp"
  fullMain={true}
>
  <div class="page-bg">
    <header class="hero-section">
      <div class="wrap">
        <div class="hero-content">
          <h1 class="display">All Stories</h1>
          <p class="lead">A collection of tales waiting to be discovered</p>
          <p class="meta-info">{stories.length} stories • Updated regularly</p>
        </div>
      </div>
    </header>

    <div class="content-section">
      <div class="wrap">
        <div class="controls-bar">
          <form role="search" class="search" onsubmit="return false">
            <label for="q" class="sr-only">Search stories</label>
            <div class="search-wrapper">
              <input
                id="q"
                name="q"
                type="search"
                placeholder="Search titles, tags, or descriptions..."
                autocomplete="off"
              />
              <svg
                class="search-icon"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="11"
                  cy="11"
                  r="8"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="m21 21-4.35-4.35"
                  stroke="currentColor"
                  stroke-width="2"></path>
              </svg>
            </div>
            <output id="count" for="q" aria-live="polite" class="count"
            ></output>
          </form>
        </div>

        <section class="stories-grid" aria-label="Story collection">
          <ul class="grid" role="list" id="stories-list">
            {
              stories.map(({ data }) => {
                const href = `/story/${data.name}`;
                const title = data.title;
                const desc = data.description || "";
                const cover = data.cover || "";
                const tags = (data.tags || []) as string[];
                const rt = data.readingTime || "";
                const haystack =
                  `${title} ${tags.join(" ")} ${desc}`.toLowerCase();

                return (
                  <li class="card" data-story data-haystack={haystack}>
                    <article class="story-card">
                      <a
                        class="coverwrap"
                        href={href}
                        aria-label={`Read ${title}`}
                      >
                        {cover ? (
                          <img
                            src={cover}
                            width="320"
                            height="200"
                            loading="lazy"
                            decoding="async"
                            alt=""
                          />
                        ) : (
                          <div class="nocover" aria-hidden="true">
                            <div class="nocover-pattern">
                              <svg
                                width="32"
                                height="32"
                                viewBox="0 0 24 24"
                                fill="none"
                              >
                                <path
                                  d="M12 6.5L20.5 19H3.5L12 6.5Z"
                                  fill="currentColor"
                                  fill-opacity="0.3"
                                />
                                <circle
                                  cx="12"
                                  cy="14"
                                  r="2"
                                  fill="currentColor"
                                />
                              </svg>
                            </div>
                          </div>
                        )}
                        <div class="cover-overlay">
                          <span class="read-indicator">Read Story</span>
                        </div>
                      </a>

                      <div class="card-content">
                        <header class="story-header">
                          <h2 class="story-title">
                            <a href={href} class="title-link">
                              {title}
                            </a>
                          </h2>
                          {rt && (
                            <div class="story-meta">
                              <span
                                class="reading-time"
                                aria-label="Reading time"
                              >
                                <svg
                                  width="16"
                                  height="16"
                                  viewBox="0 0 24 24"
                                  fill="none"
                                >
                                  <circle
                                    cx="12"
                                    cy="12"
                                    r="10"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                  <polyline
                                    points="12,6 12,12 16,14"
                                    stroke="currentColor"
                                    stroke-width="2"
                                  />
                                </svg>
                                {rt}
                              </span>
                            </div>
                          )}
                        </header>

                        {desc && <p class="story-desc">{desc}</p>}

                        {tags.length > 0 && (
                          <footer class="story-footer">
                            <ul
                              class="tags"
                              role="list"
                              aria-label="Story tags"
                            >
                              {tags.map((t: string) => (
                                <li class="tag">
                                  <span class="tag-text">{t}</span>
                                </li>
                              ))}
                            </ul>
                          </footer>
                        )}
                      </div>
                    </article>
                  </li>
                );
              })
            }
          </ul>
        </section>
      </div>
    </div>
  </div>

  <style>
    .page-bg {
      min-height: 100vh;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      position: relative;
    }

    .page-bg::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(
          circle at 20% 30%,
          rgba(139, 92, 246, 0.05) 0%,
          transparent 50%
        ),
        radial-gradient(
          circle at 80% 70%,
          rgba(59, 130, 246, 0.05) 0%,
          transparent 50%
        ),
        radial-gradient(
          circle at 40% 90%,
          rgba(147, 51, 234, 0.05) 0%,
          transparent 50%
        );
      pointer-events: none;
    }

    .wrap {
      max-width: 64rem;
      margin-inline: auto;
      padding: 1rem;
    }

    .hero-section {
      background: linear-gradient(
          135deg,
          rgba(124, 58, 237, 0.9) 0%,
          rgba(59, 130, 246, 0.9) 50%,
          rgba(147, 51, 234, 0.9) 100%
        ),
        radial-gradient(
          ellipse at 30% 0%,
          rgba(255, 255, 255, 0.1),
          transparent 50%
        );
      color: white;
      padding: 4rem 0 5rem;
      position: relative;
      overflow: hidden;
    }

    .hero-section::after {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 80px;
      background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 120' preserveAspectRatio='none'><path fill='%23f8fafc' d='M0,60 C300,120 600,0 900,60 C1050,90 1150,30 1200,60 L1200,120 L0,120 Z'/></svg>")
        no-repeat center bottom;
      background-size: 100% 80px;
    }

    .hero-content {
      text-align: center;
      position: relative;
      z-index: 1;
    }

    .display {
      font:
        700 3rem/1.1 ui-serif,
        Georgia,
        Cambria,
        "Times New Roman",
        serif;
      margin: 0 0 1rem;
      color: #ffffff;
      text-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .lead {
      font-size: 1.25rem;
      color: #e2e8f0;
      margin: 0 0 0.5rem;
      line-height: 1.6;
    }

    .meta-info {
      color: #c7d2fe;
      font-size: 0.95rem;
      margin: 0;
      font-weight: 500;
    }

    .content-section {
      padding: 3rem 0 4rem;
      position: relative;
      z-index: 1;
    }

    .controls-bar {
      margin-bottom: 3rem;
    }

    .search {
      display: flex;
      gap: 1rem;
      align-items: center;
      max-width: 48rem;
      margin: 0 auto;
    }

    .search-wrapper {
      flex: 1;
      position: relative;
    }

    .search input {
      width: 100%;
      padding: 1.25rem 1.5rem 1.25rem 3.5rem;
      border-radius: 16px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      color: #1e293b;
      font-size: 1rem;
      transition: all 0.3s ease;
      box-shadow:
        0 8px 32px rgba(0, 0, 0, 0.08),
        0 1px 0px rgba(255, 255, 255, 0.5) inset;
    }

    .search input:focus {
      outline: none;
      border-color: #7c3aed;
      box-shadow:
        0 0 0 4px rgba(124, 58, 237, 0.15),
        0 12px 40px rgba(0, 0, 0, 0.12),
        0 1px 0px rgba(255, 255, 255, 0.6) inset;
      background: rgba(255, 255, 255, 0.95);
    }

    .search input::placeholder {
      color: #94a3b8;
    }

    .search-icon {
      position: absolute;
      left: 1.25rem;
      top: 50%;
      transform: translateY(-50%);
      color: #64748b;
      pointer-events: none;
    }

    .count {
      font-size: 0.95rem;
      color: #475569;
      font-weight: 600;
      min-width: 12ch;
      text-align: center;
      padding: 1rem 1.5rem;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      border-radius: 12px;
      border: 2px solid rgba(255, 255, 255, 0.2);
      box-shadow:
        0 8px 32px rgba(0, 0, 0, 0.08),
        0 1px 0px rgba(255, 255, 255, 0.5) inset;
    }

    .stories-grid {
      position: relative;
    }

    .grid {
      display: grid;
      gap: 2rem;
      grid-template-columns: 1fr;
    }

    @media (min-width: 48rem) {
      .grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (min-width: 72rem) {
      .grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    .card {
      list-style: none;
    }

    .story-card {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(20px);
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 20px;
      overflow: hidden;
      box-shadow:
        0 8px 32px rgba(0, 0, 0, 0.08),
        0 1px 0px rgba(255, 255, 255, 0.5) inset;
      display: flex;
      flex-direction: column;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      height: 100%;
    }

    .story-card::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #7c3aed, #3b82f6, #8b5cf6);
      opacity: 0;
      transition: opacity 0.4s ease;
    }

    .story-card:hover {
      transform: translateY(-12px) scale(1.02);
      box-shadow:
        0 24px 60px rgba(0, 0, 0, 0.15),
        0 1px 0px rgba(255, 255, 255, 0.6) inset;
      border-color: rgba(124, 58, 237, 0.3);
    }

    .story-card:hover::before {
      opacity: 1;
    }

    .coverwrap {
      display: block;
      aspect-ratio: 16 / 10;
      background: linear-gradient(135deg, #e2e8f0, #f1f5f9);
      position: relative;
      overflow: hidden;
    }

    .coverwrap img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .story-card:hover .coverwrap img {
      transform: scale(1.1);
    }

    .cover-overlay {
      position: absolute;
      inset: 0;
      background: linear-gradient(
        135deg,
        rgba(124, 58, 237, 0.8),
        rgba(59, 130, 246, 0.8)
      );
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: all 0.3s ease;
    }

    .story-card:hover .cover-overlay {
      opacity: 1;
    }

    .read-indicator {
      color: white;
      font-weight: 600;
      font-size: 1rem;
      text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
      transform: translateY(8px);
      transition: transform 0.3s ease;
    }

    .story-card:hover .read-indicator {
      transform: translateY(0);
    }

    .nocover {
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #e2e8f0, #f1f5f9);
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .nocover-pattern {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: linear-gradient(135deg, #7c3aed, #3b82f6);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      opacity: 0.7;
      transition: all 0.3s ease;
    }

    .story-card:hover .nocover-pattern {
      opacity: 1;
      transform: scale(1.1);
    }

    .card-content {
      padding: 2rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      flex-grow: 1;
    }

    .story-header {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .story-title {
      font:
        700 1.375rem/1.3 ui-serif,
        Georgia,
        Cambria,
        "Times New Roman",
        serif;
      margin: 0;
    }

    .title-link {
      color: #1e293b;
      text-decoration: none;
      transition: all 0.3s ease;
      background: linear-gradient(135deg, #1e293b, #475569);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .title-link:hover {
      background: linear-gradient(135deg, #7c3aed, #3b82f6);
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .story-meta {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .reading-time {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      color: #64748b;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .reading-time svg {
      flex-shrink: 0;
    }

    .story-desc {
      margin: 0;
      color: #475569;
      line-height: 1.6;
      font-size: 1rem;
      flex-grow: 1;
    }

    .story-footer {
      margin-top: auto;
    }

    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin: 0;
      padding: 0;
    }

    .tag {
      list-style: none;
    }

    .tag-text {
      display: inline-block;
      font-size: 0.8rem;
      font-weight: 600;
      color: #7c3aed;
      background: rgba(124, 58, 237, 0.1);
      border: 2px solid rgba(124, 58, 237, 0.2);
      padding: 0.375rem 0.875rem;
      border-radius: 999px;
      transition: all 0.3s ease;
    }

    .tag:hover .tag-text {
      background: rgba(124, 58, 237, 0.15);
      border-color: rgba(124, 58, 237, 0.4);
      transform: translateY(-2px);
    }

    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    :focus-visible {
      outline: 3px solid #7c3aed;
      outline-offset: 3px;
      border-radius: 8px;
    }

    @media (max-width: 47.9rem) {
      .display {
        font-size: 2.25rem;
      }

      .hero-section {
        padding: 3rem 0 4rem;
      }

      .content-section {
        padding: 2rem 0 3rem;
      }

      .controls-bar {
        margin-bottom: 2rem;
      }

      .search {
        flex-direction: column;
        gap: 1rem;
        align-items: stretch;
      }

      .count {
        text-align: center;
      }

      .grid {
        gap: 1.5rem;
      }

      .card-content {
        padding: 1.5rem;
      }
    }

    @media (max-width: 29.9rem) {
      .wrap {
        padding: 0.75rem;
      }

      .display {
        font-size: 2rem;
      }

      .story-title {
        font-size: 1.25rem;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      .story-card,
      .coverwrap img,
      .tag-text,
      .search input,
      .nocover-pattern,
      .cover-overlay,
      .read-indicator {
        transition: none !important;
      }

      .story-card:hover {
        transform: none;
      }

      .story-card:hover .coverwrap img {
        transform: none;
      }

      .story-card:hover .nocover-pattern {
        transform: none;
      }
    }

    /* Low-data mode optimizations */
    [data-lowdata="true"] .page-bg {
      background: #f8fafc;
    }

    [data-lowdata="true"] .page-bg::before {
      display: none;
    }

    [data-lowdata="true"] .hero-section {
      background: linear-gradient(135deg, #7c3aed, #3b82f6);
    }

    [data-lowdata="true"] .story-card,
    [data-lowdata="true"] .search input,
    [data-lowdata="true"] .count {
      backdrop-filter: none;
      background: white;
    }

    [data-lowdata="true"] .story-card:hover {
      transform: none;
    }
  </style>

  <!-- Enhanced progressive filter -->
  <script is:inline>
    (function () {
      const q = document.getElementById("q");
      const out = document.getElementById("count");
      const items = Array.from(document.querySelectorAll("[data-story]"));
      const totalCount = items.length;

      function updateCount(visible) {
        if (out) {
          out.textContent =
            visible === totalCount
              ? `${totalCount} stories`
              : `${visible} of ${totalCount}`;
        }
      }

      function filter() {
        const term = (q.value || "").trim().toLowerCase();
        let visible = 0;

        for (const li of items) {
          const hit = !term || li.dataset.haystack.includes(term);
          li.hidden = !hit;
          if (hit) visible++;
        }

        updateCount(visible);

        // Add subtle animation for search results
        if (visible === 0 && term) {
          document.querySelector(".stories-grid").style.opacity = "0.5";
        } else {
          document.querySelector(".stories-grid").style.opacity = "1";
        }
      }

      // Debounced filter for better performance
      let filterTimeout;
      function debouncedFilter() {
        clearTimeout(filterTimeout);
        filterTimeout = setTimeout(filter, 150);
      }

      // Initialize
      if (q) {
        q.addEventListener("input", debouncedFilter);
        filter(); // initial run

        // Focus search on '/' key press
        document.addEventListener("keydown", function (e) {
          if (
            e.key === "/" &&
            !e.ctrlKey &&
            !e.metaKey &&
            document.activeElement !== q
          ) {
            e.preventDefault();
            q.focus();
          }
        });
      }
    })();
  </script>
</Base>
